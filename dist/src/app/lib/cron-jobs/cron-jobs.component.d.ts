import { Injector, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { CronJobsConfig, CronJobsSelectOption, CronJobsValidationConfig } from '../contracts/contracts';
import { DataService } from '../services/data.service';
import { ControlValueAccessor, FormBuilder, FormControl, FormGroup } from '@angular/forms';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/takeUntil';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/publishReplay';
import 'rxjs/add/operator/filter';
import 'rxjs/add/operator/do';
export declare class CronJobsComponent implements OnInit, OnChanges, OnDestroy, ControlValueAccessor {
    private dataService;
    private injector;
    private formBuilder;
    config: CronJobsConfig;
    validate: CronJobsValidationConfig;
    isValid: boolean;
    formControl: FormControl;
    isDisabled: boolean;
    baseFrequencyData: Array<CronJobsSelectOption>;
    baseFrequency$: Observable<number>;
    daysOfWeekData: Array<CronJobsSelectOption>;
    daysOfMonthData: Array<CronJobsSelectOption>;
    monthsData: Array<CronJobsSelectOption>;
    hoursData: Array<CronJobsSelectOption>;
    minutesData: Array<CronJobsSelectOption>;
    onChange: (cronValue: string) => {};
    onTouched: () => {};
    cronJobsForm: FormGroup;
    private isPatching;
    private unSubscribe;
    private cronService;
    constructor(dataService: DataService, injector: Injector, formBuilder: FormBuilder);
    ngOnInit(): void;
    onBlur(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setService(): void;
    writeValue(cronValue: string): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState?(isDisabled: boolean): void;
    getIsValid(): boolean;
    getIsInvalid(): boolean;
    getValid(): boolean;
    ngOnDestroy(): void;
}
